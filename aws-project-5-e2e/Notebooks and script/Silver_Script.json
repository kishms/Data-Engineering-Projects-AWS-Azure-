{
	"jobConfig": {
		"name": "Silver_Script",
		"description": "This script is used for automated silver and gold layer transformation",
		"role": "arn:aws:iam::827859361400:role/aws-project-glue-s3-iam",
		"command": "glueetl",
		"version": "5.0",
		"runtime": null,
		"workerType": "G.1X",
		"numberOfWorkers": 10,
		"maxCapacity": 10,
		"jobRunQueuingEnabled": false,
		"maxRetries": 0,
		"timeout": 480,
		"maxConcurrentRuns": 1,
		"security": "none",
		"scriptName": "Silver_Script.py",
		"scriptLocation": "s3://aws-glue-assets-827859361400-ap-south-1/scripts/",
		"language": "python-3",
		"spark": true,
		"sparkConfiguration": "standard",
		"jobParameters": [],
		"tags": [],
		"jobMode": "DEVELOPER_MODE",
		"createdOn": "2025-09-27T06:16:06.291Z",
		"developerMode": true,
		"connectionsList": [],
		"temporaryDirectory": "s3://aws-glue-assets-827859361400-ap-south-1/temporary/",
		"glueHiveMetastore": true,
		"etlAutoTuning": true,
		"metrics": true,
		"observabilityMetrics": true,
		"bookmark": "job-bookmark-disable",
		"sparkPath": "s3://aws-glue-assets-827859361400-ap-south-1/sparkHistoryLogs/",
		"flexExecution": false,
		"minFlexWorkers": null,
		"maintenanceWindow": null,
		"logging": false
	},
	"hasBeenSaved": false,
	"usageProfileName": null,
	"script": "from pyspark.sql import SparkSession\nfrom pyspark.sql.functions import col, current_timestamp\n\n# -------------------------\n# S3 Paths (hardcoded)\n# -------------------------\nBRONZE_PATH = \"s3://aws-project-1-mskish/silver-incremental/public/transactions/\"\nSILVER_PATH = \"s3://aws-project-1-mskish/silver/\"\nGOLD_PATH = \"s3://aws-project-1-mskish/gold/\"\n\n# Create Spark session\nspark = SparkSession.builder.appName(\"BronzeToGold\").getOrCreate()\n\n# -------------------------\n# 1️⃣ Read Bronze Layer\n# -------------------------\nbronze_df = spark.read.parquet(BRONZE_PATH)\n\n# -------------------------\n# 2️⃣ Transform & Create Silver Layer\n# -------------------------\nsilver_df = bronze_df.select(\n    col(\"dms_id\").alias(\"id\"),\n    col(\"amount\"),\n    col(\"date\"),\n    col(\"use_chip\"),\n    col(\"zip\")\n).withColumn(\"ingested_at\", current_timestamp())\n\n# Write silver layer (overwrite all for simplicity)\nsilver_df.write.mode(\"overwrite\").parquet(SILVER_PATH)\n\n# -------------------------\n# 3️⃣ Transform & Create Gold Layer\n# -------------------------\ngold_df = silver_df.groupBy(\"date\").agg(\n    {\"amount\": \"sum\"}\n).withColumnRenamed(\"sum(amount)\", \"total_amount\") \\\n .withColumn(\"gold_ingested_at\", current_timestamp())\n\n# Write gold layer\ngold_df.write.mode(\"overwrite\").parquet(GOLD_PATH)\n\n# -------------------------\n# 4️⃣ Log completion\n# -------------------------\nprint(f\"Silver layer written to: {SILVER_PATH}\")\nprint(f\"Gold layer written to: {GOLD_PATH}\")\nprint(\"Job completed successfully.\")\n"
}